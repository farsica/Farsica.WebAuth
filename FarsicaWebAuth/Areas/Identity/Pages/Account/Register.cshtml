@page
@model RegisterModel
@{
    ViewData["Title"] = "Register";
}

<h1>@ViewData["Title"]</h1>

<div class="row">
    <div class="col-md-4">
        <form id="registerForm" asp-route-returnUrl="@Model.ReturnUrl" method="post">
            <h2>Create a new account.</h2>
            <hr />
            <div asp-validation-summary="ModelOnly" class="text-danger" role="alert"></div>
            <div class="form-floating mb-3">
                <input asp-for="Input.Username" class="form-control" autocomplete="username" aria-required="true" placeholder="Username" />
                <label asp-for="Input.Username">Username</label>
                <span asp-validation-for="Input.Username" class="text-danger"></span>
            </div>
            <div class="form-floating mb-3">
                <input asp-for="Input.FirstName" class="form-control" autocomplete="firstName" aria-required="true" placeholder="firstName" />
                <label asp-for="Input.FirstName">FirstName</label>
                <span asp-validation-for="Input.FirstName" class="text-danger"></span>
            </div>
            <div class="form-floating mb-3">
                <input asp-for="Input.LastName" class="form-control" autocomplete="lastName" aria-required="true" placeholder="lastName" />
                <label asp-for="Input.LastName">LastName</label>
                <span asp-validation-for="Input.LastName" class="text-danger"></span>
            </div>
            <button id="registerSubmit" type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </form>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="~/js/site.js"></script>
    <script>
        document.getElementById('registerForm').addEventListener('submit', handleRegisterSubmit);

        async function handleRegisterSubmit(event) {
            event.preventDefault();

            // send to server for registering
            let credentialOptions;
            try {
                credentialOptions = await fetchMakeCredentialOptions();

            } catch (e) {
                console.error(e);
                alert("Something went really wrong");
                return;
            }

            if (credentialOptions.status !== "ok") {
                alert(credentialOptions.errorMessage);
                return;
            }

            // Turn the challenge back into the accepted format of padded base64
            credentialOptions.challenge = coerceToArrayBuffer(credentialOptions.challenge);
            credentialOptions.user.id = coerceToArrayBuffer(credentialOptions.user.id);

            credentialOptions.excludeCredentials = credentialOptions.excludeCredentials.map((c) => {
                c.id = coerceToArrayBuffer(c.id);
                return c;
            });

            if (credentialOptions.authenticatorSelection.authenticatorAttachment === null) {
                credentialOptions.authenticatorSelection.authenticatorAttachment = undefined;
            }

            let newCredential;
            try {
                newCredential = await navigator.credentials.create({
                    publicKey: credentialOptions
                });
            } catch (e) {
                alert("Could not create credentials in browser.");
                return;
            }

            try {
                await registerNewCredential(newCredential);
                window.location.replace("@(Url.Page("/Account/Login", new { area = "Identity" }))");
            } catch (e) {
                alert("Could not register new credentials on server");
            }
        }

        async function fetchMakeCredentialOptions() {
            let username = document.getElementById("@(Html.IdFor(m => m.Input.Username))").value;
            let firstName = document.getElementById("@(Html.IdFor(m => m.Input.FirstName))").value;
            let lastName = document.getElementById("@(Html.IdFor(m => m.Input.LastName))").value;

            // possible values: none, direct, indirect
            let attestationType = "none";
            // possible values: <empty>, platform, cross-platform
            let authenticatorAttachment = "";

            // possible values: preferred, required, discouraged
            let userVerification = "preferred";

            // possible values: true,false
            let requireResidentKey = "false";

            let formData = { username: username, firstName: firstName, lastName: lastName }

            let response = await fetch('@(Url.Action("RegisterOptions", "Account"))', {
                method: 'POST',
                body: JSON.stringify(formData),
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                }
            });

            let data = await response.json();

            return data;
        }

        // This should be used to verify the auth data with the server
        async function registerNewCredential(newCredential) {

            let attestationObject = new Uint8Array(newCredential.response.attestationObject);
            let clientDataJSON = new Uint8Array(newCredential.response.clientDataJSON);
            let rawId = new Uint8Array(newCredential.rawId);

            const data = {
                id: newCredential.id,
                rawId: coerceToBase64Url(rawId),
                type: newCredential.type,
                extensions: newCredential.getClientExtensionResults(),
                response: {
                    AttestationObject: coerceToBase64Url(attestationObject),
                    clientDataJson: coerceToBase64Url(clientDataJSON)
                }
            };

            let response;
            try {
                response = await registerCredentialWithServer(data);
            } catch (e) {
                alert(e);
                return;
            }

            // show error
            if (response.status !== "ok") {
                alert(response.errorMessage);
                return;
            }

            alert("You've registered successfully. You will now be redirected to sign in page");
        }

        async function registerCredentialWithServer(formData) {
            let response = await fetch('@(Url.Action("Register", "Account"))', {
                method: 'POST',
                body: JSON.stringify(formData),
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                }
            });

            let data = await response.json();

            return data;
        }
    </script>
}
