@page
@model LoginModel

@{
    ViewData["Title"] = "Log in";
}

<h1>@ViewData["Title"]</h1>
<div class="row">
    <div class="col-md-4">
        <section>
            <form id="account" method="post">
                <h2>Use a local account to log in.</h2>
                <hr />
                <div asp-validation-summary="ModelOnly" class="text-danger" role="alert"></div>
                <div class="form-floating mb-3">
                    <input asp-for="Input.Username" class="form-control" autocomplete="username" aria-required="true" placeholder="username" />
                    <label asp-for="Input.Username" class="form-label">Username</label>
                    <span asp-validation-for="Input.Username" class="text-danger"></span>
                </div>
                <div>
                    <button id="login-submit" type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
                </div>
                <div>
                    <p>
                        <a asp-page="./Register" asp-route-returnUrl="@Model.ReturnUrl">Register as a new user</a>
                    </p>
                </div>
            </form>
        </section>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="~/js/site.js"></script>
    <script>
        document.getElementById('account').addEventListener('submit', handleSignInSubmit);

        async function handleSignInSubmit(event) {
            event.preventDefault();

            let username = document.getElementById("@(Html.IdFor(m => m.Input.Username))").value,
                data = { username: username },
                publicKeyOptions;
            try {
                var res = await fetch('@(Url.Action("LoginOptions", "Account"))', {
                    method: 'POST',
                    body: JSON.stringify(data),
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    }
                });

                publicKeyOptions = await res.json();
            } catch (e) {
                alert("Request to server failed");
                return;
            }

            if (publicKeyOptions.status !== "ok") {
                alert(publicKeyOptions.errorMessage);
                return;
            }

            const challenge = publicKeyOptions.challenge.replace(/-/g, "+").replace(/_/g, "/");
            publicKeyOptions.challenge = Uint8Array.from(atob(challenge), c => c.charCodeAt(0));

            publicKeyOptions.allowCredentials.forEach(function (listItem) {
                var fixedId = listItem.id.replace(/\_/g, "/").replace(/\-/g, "+");
                listItem.id = Uint8Array.from(atob(fixedId), c => c.charCodeAt(0));
            });

            // ask browser for credentials (browser will ask connected authenticators)
            let credential;
            try {
                credential = await navigator.credentials.get({ publicKey: publicKeyOptions });

                try {
                    await verifyAssertionWithServer(credential);
                } catch (e) {
                    alert("Could not verify assertion");
                }
            } catch (err) {
                alert(err.message ? err.message : err);
            }
        }

        async function verifyAssertionWithServer(assertedCredential) {
            let authData = new Uint8Array(assertedCredential.response.authenticatorData);
            let clientDataJSON = new Uint8Array(assertedCredential.response.clientDataJSON);
            let rawId = new Uint8Array(assertedCredential.rawId);
            let sig = new Uint8Array(assertedCredential.response.signature);
            const data = {
                id: assertedCredential.id,
                rawId: coerceToBase64Url(rawId),
                type: assertedCredential.type,
                extensions: assertedCredential.getClientExtensionResults(),
                response: {
                    authenticatorData: coerceToBase64Url(authData),
                    clientDataJson: coerceToBase64Url(clientDataJSON),
                    signature: coerceToBase64Url(sig)
                }
            };

            let response;
            try {
                let res = await fetch("@(Url.Action("Login", "Account"))", {
                    method: 'POST',
                    body: JSON.stringify(data),
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    }
                });

                response = await res.json();
            } catch (e) {
                alert("Request to server failed", e);
                throw e;
            }

            if (response.status !== "ok") {
                alert(response.errorMessage);
                return;
            }

            window.location.replace("@(Url.Page("/Index"))");
        }
    </script>
}
